name: Deploy Docker Image to AWS ECR, EC2, and ECS with Debugging

on:
  push:
    branches:
      - main

jobs:
  deploy-to-ecs-and-ec2:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Step 2: Verify Task Definition Template File
      - name: Verify Task Definition Template File
        run: ls -ltrha

      # Step 3: List Directory Contents
      - name: List Directory Contents
        run: ls -al

      # Step 4: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 5: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          echo "Authenticating with AWS ECR..."
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 476424248806.dkr.ecr.ap-south-1.amazonaws.com

      # Step 6: Build and Push Docker Image to ECR
      - name: Build and Push Docker Image
        run: |
          echo "Building Docker Image..."
          ECR_URI=476424248806.dkr.ecr.ap-south-1.amazonaws.com/sumit-ecr
          docker build -t $ECR_URI:latest .
          echo "Pushing Docker Image to ECR..."
          docker push $ECR_URI:latest

      # Step 7: Deploy Docker Image on EC2
#      - name: Deploy Docker Image on EC2
#        uses: appleboy/ssh-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_PUBLIC_IP }}
#          username: ubuntu
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            set -euxo pipefail
#            echo "Starting EC2 deployment..."#

#            echo "Updating EC2 instance..."
#            sudo apt-get update -y#

#            echo "Installing AWS CLI (if not installed)..."
#            if ! [ -x "$(command -v aws)" ]; then
#              sudo apt-get install -y unzip
#              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#              unzip awscliv2.zip
#              sudo ./aws/install
#            else
#              echo "AWS CLI is already installed."
#            fi#

#            echo "Installing Docker (if not installed)..."
#            if ! [ -x "$(command -v docker)" ]; then
#              sudo apt-get install -y docker.io
#              sudo systemctl start docker
#              sudo systemctl enable docker
#            else
#              echo "Docker is already installed."
#            fi#

#            echo "Authenticating EC2 instance with ECR..."
#            aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin 476424248806.dkr.ecr.ap-south-1.amazonaws.com#

#            echo "Pulling the Docker image from ECR..."
#            sudo docker pull 476424248806.dkr.ecr.ap-south-1.amazonaws.com/sumit-ecr:latest#

#            echo "Stopping any existing container..."
#            sudo docker stop sumit-ecr-container || true
#            sudo docker rm sumit-ecr-container || true#

#            echo "Starting the Docker container on EC2..."
#            sudo docker run -d --name sumit-ecr-container -p 80:3000 476424248806.dkr.ecr.ap-south-1.amazonaws.com/sumit-ecr:latest#

#            echo "EC2 Deployment Complete!"



      # Step 2: Verify Task Definition Template File
      - name: Verify Task Definition Template File
        run: cat task-definition-template.json

      # Step 8: Render ECS Task Definition
      - name: Render ECS Task Definition
        id: render-task-definition
        run: |
          sed "s|<IMAGE_URI>|476424248806.dkr.ecr.ap-south-1.amazonaws.com/sumit-ecr:latest|g" task-definition-template.json > task-definition.json

      # Step 9: List Directory After Rendering Task Definition
      - name: List Directory After Rendering
        run: ls -al

      # Step 10: Deploy to Amazon ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ secrets.SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_NAME }}
          wait-for-service-stability: true
